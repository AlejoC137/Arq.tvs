{"version":3,"file":"ProjectExcelView-CTO962-B.js","sources":["../../node_modules/lucide-react/dist/esm/icons/arrow-up-down.js","../../src/components/DatesManager.jsx","../../src/components/ProjectExcelView.jsx"],"sourcesContent":["/**\n * @license lucide-react v0.441.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowUpDown = createLucideIcon(\"ArrowUpDown\", [\n  [\"path\", { d: \"m21 16-4 4-4-4\", key: \"f6ql7i\" }],\n  [\"path\", { d: \"M17 20V4\", key: \"1ejh1v\" }],\n  [\"path\", { d: \"m3 8 4-4 4 4\", key: \"11wl7u\" }],\n  [\"path\", { d: \"M7 4v16\", key: \"1glfcx\" }]\n]);\n\nexport { ArrowUpDown as default };\n//# sourceMappingURL=arrow-up-down.js.map\n","import React, { useState, useEffect } from 'react';\r\n\r\n// Helper para convertir el formato DD/MM/YYYY a YYYY-MM-DD, que es el que necesita el input de tipo \"date\".\r\nconst toInputDate = (dmyString) => {\r\n  if (!dmyString || typeof dmyString !== 'string' || dmyString.split('/').length !== 3) {\r\n    return ''; // Retorna un string vacío si el formato es inválido o no existe\r\n  }\r\n  const [day, month, year] = dmyString.split('/');\r\n  // Asegura que el mes y el día tengan dos dígitos (ej: 09 en vez de 9)\r\n  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\r\n};\r\n\r\n// Helper para convertir el formato YYYY-MM-DD (del input) de vuelta a DD/MM/YYYY para guardarlo.\r\nconst toDisplayDate = (ymdString) => {\r\n  if (!ymdString || typeof ymdString !== 'string' || ymdString.split('-').length !== 3) {\r\n    return ''; // Retorna un string vacío si el formato es inválido\r\n  }\r\n  const [year, month, day] = ymdString.split('-');\r\n  return `${day}/${month}/${year}`;\r\n};\r\n\r\n\r\nconst DatesManager = ({ task, onSave }) => {\r\n  \r\n  const parseDates = (datesJson) => {\r\n    try {\r\n      // Si no hay JSON o no es un string, devuelve una estructura por defecto\r\n      if (!datesJson || typeof datesJson !== 'string') {\r\n          return { assignDate: '', dueDate: '', logs: [] };\r\n      }\r\n      const parsed = JSON.parse(datesJson);\r\n      // Asegura que las propiedades existan y que logs sea un array\r\n      return {\r\n          assignDate: parsed.assignDate || '',\r\n          dueDate: parsed.dueDate || '',\r\n          logs: Array.isArray(parsed.logs) ? parsed.logs : []\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error parsing dates JSON in DatesManager:\", error);\r\n      return { assignDate: '', dueDate: '', logs: [] };\r\n    }\r\n  };\r\n\r\n  // El estado local maneja las fechas de la tarea actual, inicializado de forma segura\r\n  const [dates, setDates] = useState(() => parseDates(task.dates));\r\n\r\n  // Sincroniza el estado si la tarea que se pasa como prop cambia desde el exterior\r\n  useEffect(() => {\r\n    setDates(parseDates(task.dates));\r\n  }, [task.dates]);\r\n\r\n\r\n  const handleDateChange = (e) => {\r\n    const { name, value } = e.target; // 'value' del input date viene en formato \"YYYY-MM-DD\"\r\n    \r\n    // Convierte la fecha al formato DD/MM/YYYY antes de guardarla\r\n    const displayDate = toDisplayDate(value);\r\n\r\n    // Crea el objeto de datos actualizado, asegurándose de mantener los logs existentes\r\n    const currentFullDateObject = parseDates(task.dates);\r\n    const updatedDates = { \r\n        ...currentFullDateObject, \r\n        [name]: displayDate \r\n    };\r\n    \r\n    // Llama a la función onSave del componente padre para persistir el cambio inmediatamente\r\n    // CORRECCIÓN: La clave debe ser 'dates' (mayúscula) para coincidir con el nombre de la columna en la BD.\r\n    onSave(task.id, { dates: JSON.stringify(updatedDates) });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-1 text-xs p-1\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <label htmlFor={`assignDate-${task.id}`} className=\"font-semibold text-gray-600 mr-2 whitespace-nowrap\">Asig:</label>\r\n        <input\r\n          id={`assignDate-${task.id}`}\r\n          name=\"assignDate\"\r\n          type=\"date\"\r\n          value={toInputDate(dates.assignDate)}\r\n          onChange={handleDateChange}\r\n          className=\"p-1 border border-gray-200 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 w-full\"\r\n        />\r\n      </div>\r\n      <div className=\"flex items-center justify-between\">\r\n        <label htmlFor={`dueDate-${task.id}`} className=\"font-semibold text-gray-600 mr-2 whitespace-nowrap\">Límite:</label>\r\n        <input\r\n          id={`dueDate-${task.id}`}\r\n          name=\"dueDate\"\r\n          type=\"date\"\r\n          value={toInputDate(dates.dueDate)}\r\n          onChange={handleDateChange}\r\n          className=\"p-1 border border-gray-200 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 w-full\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatesManager;","import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    Search, Download, Plus,\r\n    XCircle, ArrowUpDown, Trash2, ChevronRight, ChevronDown\r\n} from 'lucide-react';\r\nimport * as XLSX from 'xlsx';\r\n\r\nimport FormTask from './FormTask';\r\nimport TaskActions from './TaskActions';\r\nimport InlineActionsTask from './InlineActionsTask';\r\nimport {\r\n    getAllFromTable,\r\n    updateTask,\r\n    addTask,\r\n    deleteTask\r\n} from '../store/actions/actions';\r\nimport TaskLog from './TaskLog';\r\nimport DatesManager from './DatesManager';\r\n\r\nconst ESTADOS = {\r\n    PENDIENTE: 'Pendiente', EN_PROCESO: 'En Progreso', COMPLETADO: 'Completado',\r\n    CANCELADO: 'Cancelado', EN_REVISION: 'En Revisión', BLOQUEADO: 'Bloqueado',\r\n    APROBACION_REQUERIDA: 'Aprobación Requerida', EN_DISENO: 'En Diseño', EN_DISCUSION: 'En Discusión'\r\n};\r\n\r\nconst getEstadoColor = (estado) => {\r\n    const colors = {\r\n        'Pendiente': 'bg-yellow-100 text-yellow-800', 'En Progreso': 'bg-blue-100 text-blue-800',\r\n        'Completado': 'bg-green-100 text-green-800', 'Cancelado': 'bg-red-100 text-red-800',\r\n        'En Revisión': 'bg-purple-100 text-purple-800', 'Bloqueado': 'bg-gray-400 text-white',\r\n        'Aprobación Requerida': 'bg-orange-100 text-orange-800', 'En Diseño': 'bg-pink-100 text-pink-800',\r\n        'En Discusión': 'bg-indigo-100 text-indigo-800'\r\n    };\r\n    return colors[estado] || 'bg-gray-100 text-gray-800';\r\n};\r\n\r\nconst getPriorityColor = (priority) => {\r\n    const colors = {\r\n        'Baja': 'bg-blue-100 text-blue-800',\r\n        'Media-Baja': 'bg-green-100 text-green-800',\r\n        'Media': 'bg-yellow-100 text-yellow-800',\r\n        'Media-Alta': 'bg-orange-200 text-orange-900',\r\n        'Alta': 'bg-red-500 text-white font-bold',\r\n    };\r\n    return colors[priority] || 'bg-gray-100 text-gray-800';\r\n};\r\n\r\n// --- NUEVO: Definición centralizada de las columnas ---\r\nconst initialColumns = [\r\n    { key: 'Priority', label: 'Prioridad', width: 75, sortable: true },\r\n    { key: 'stage_id', label: 'Etapa', width: 75, sortable: true },\r\n    { key: 'task_description', label: 'Tarea / Espacio', width: 350, sortable: true },\r\n    { key: 'inline_actions', label: 'Acciones de Tarea', width: 500, sortable: false },\r\n    { key: 'status', label: 'Estado', width: 75, sortable: true },\r\n    { key: 'Progress', label: 'Progreso', width: 100, sortable: true },\r\n    { key: 'staff_id', label: 'Responsable', width: 90, sortable: true },\r\n    { key: 'entregable_id', label: 'Entregable', width: 120, sortable: true },\r\n    { key: 'dates', label: 'Fechas', width: 250, sortable: true },\r\n    { key: 'notes', label: 'Notas', width: 300, sortable: true },\r\n];\r\n\r\nconst ProjectExcelView = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // --- ESTADOS ---\r\n    const [data, setData] = useState([]);\r\n    const [proyectos, setProyectos] = useState([]);\r\n    const [staff, setStaff] = useState([]);\r\n    const [stages, setStages] = useState([]);\r\n    const [entregables, setEntregables] = useState([]);\r\n\r\n    const [Priorities, setPriorities] = useState([\r\n        { id: \"Baja\", name: \"Baja\" }, { id: \"Media-Baja\", name: \"Media-Baja\" },\r\n        { id: \"Media\", name: \"Media\" }, { id: \"Media-Alta\", name: \"Media-Alta\" },\r\n        { id: \"Alta\", name: \"Alta\" },\r\n    ]);\r\n\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n    const [filters, setFilters] = useState({ project_id: '', stage_id: '', staff_id: '', status: '', search: '' });\r\n    const [selectedRows, setSelectedRows] = useState(new Set());\r\n    const [sortConfig, setSortConfig] = useState({ key: 'task_description', direction: 'ascending' });\r\n    const [collapsedGroups, setCollapsedGroups] = useState(new Set());\r\n\r\n    // --- NUEVO: Estados y Refs para el redimensionamiento de columnas ---\r\n    const [columnWidths, setColumnWidths] = useState(\r\n        initialColumns.reduce((acc, col) => ({ ...acc, [col.key]: col.width }), {})\r\n    );\r\n    const resizingColumnRef = useRef(null);\r\n\r\n    // --- FETCHING DE DATOS ---\r\n    const fetchTasks = async () => {\r\n        const tareasAction = await dispatch(getAllFromTable(\"Tareas\"));\r\n        if (tareasAction?.payload) setData(tareasAction.payload);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchAllData = async () => {\r\n            const [proyectosAction, staffAction, stagesAction, entregablesAction] = await Promise.all([\r\n                dispatch(getAllFromTable(\"Proyectos\")),\r\n                dispatch(getAllFromTable(\"Staff\")),\r\n                dispatch(getAllFromTable(\"Stage\")),\r\n                dispatch(getAllFromTable(\"Entregables_template\"))\r\n            ]);\r\n            if (proyectosAction?.payload) setProyectos(proyectosAction.payload);\r\n            if (staffAction?.payload) setStaff(staffAction.payload);\r\n            if (stagesAction?.payload) setStages(stagesAction.payload);\r\n            if (entregablesAction?.payload) setEntregables(entregablesAction.payload);\r\n        };\r\n        fetchAllData();\r\n        fetchTasks();\r\n    }, [dispatch]);\r\n\r\n    // --- MEMOS PARA FILTRADO, ORDENACIÓN Y AGRUPACIÓN ---\r\n    const filteredData = useMemo(() => {\r\n        let filtered = [...data];\r\n        if (filters.search) {\r\n            const searchLower = filters.search.toLowerCase();\r\n            filtered = filtered.filter(item =>\r\n                Object.values(item).some(val => String(val).toLowerCase().includes(searchLower))\r\n            );\r\n        }\r\n        if (filters.project_id) filtered = filtered.filter(item => item.project_id === filters.project_id);\r\n        if (filters.stage_id) filtered = filtered.filter(item => item.stage_id === filters.stage_id);\r\n        if (filters.staff_id) filtered = filtered.filter(item => item.staff_id === filters.staff_id);\r\n        if (filters.status) filtered = filtered.filter(item => item.status === filters.status);\r\n        return filtered;\r\n    }, [data, filters]);\r\n\r\n    const groupedAndSortedItems = useMemo(() => {\r\n        let sortableItems = [...filteredData];\r\n        if (sortConfig.key !== null) {\r\n            sortableItems.sort((a, b) => {\r\n                const getValue = (item, key) => {\r\n                    let value = item[key] || '';\r\n                    switch (key) {\r\n                        case 'project_id': return proyectos.find(p => p.id === value)?.name || value;\r\n                        case 'staff_id': return staff.find(s => s.id === value)?.name || value;\r\n                        case 'stage_id': return stages.find(s => s.id === value)?.name || value;\r\n                        case 'entregable_id': return entregables.find(e => e.id === value)?.entregable_nombre || value;\r\n                        case 'dates': return item.dates ? JSON.parse(item.dates).dueDate || '' : '';\r\n                        case 'Progress': return Number(value || 0);\r\n                        default: return value;\r\n                    }\r\n                };\r\n                const aValue = getValue(a, sortConfig.key);\r\n                const bValue = getValue(b, sortConfig.key);\r\n                if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                return 0;\r\n            });\r\n        }\r\n        return sortableItems.reduce((acc, item) => {\r\n            const projectName = proyectos.find(p => p.id === item.project_id)?.name || 'Tareas sin Proyecto';\r\n            if (!acc[projectName]) acc[projectName] = [];\r\n            acc[projectName].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [filteredData, sortConfig, proyectos, staff, stages, entregables]);\r\n\r\n    // --- LÓGICA DE LA UI (GRUPOS, ORDENACIÓN, SELECCIÓN) ---\r\n    const toggleGroup = (groupName) => {\r\n        setCollapsedGroups(prev => {\r\n            const newSet = new Set(prev);\r\n            newSet.has(groupName) ? newSet.delete(groupName) : newSet.add(groupName);\r\n            return newSet;\r\n        });\r\n    };\r\n\r\n    const requestSort = (key) => {\r\n        let direction = 'ascending';\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n            direction = 'descending';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const handleSelectRow = (rowId) => {\r\n        setSelectedRows(prev => {\r\n            const newSelected = new Set(prev);\r\n            newSelected.has(rowId) ? newSelected.delete(rowId) : newSelected.add(rowId);\r\n            return newSelected;\r\n        });\r\n    };\r\n\r\n    // --- ACCIONES CRUD ---\r\n    const handleAddTask = (taskData) => {\r\n        const sanitizedTaskData = { ...taskData };\r\n        ['project_id', 'staff_id', 'stage_id', 'entregable_id'].forEach(field => {\r\n            if (sanitizedTaskData[field] === '') sanitizedTaskData[field] = null;\r\n        });\r\n        dispatch(addTask(sanitizedTaskData)).then(fetchTasks);\r\n        setIsFormOpen(false);\r\n    };\r\n\r\n    const handleDeleteTask = (taskId, taskDescription) => {\r\n        if (window.confirm(`¿Estás seguro de que deseas eliminar la tarea?\\n\\n\"${taskDescription}\"`)) {\r\n            dispatch(deleteTask(taskId)).then(fetchTasks);\r\n        }\r\n    };\r\n\r\n    const updateCell = (rowId, fieldsToUpdate) => {\r\n        dispatch(updateTask(rowId, fieldsToUpdate)).then(() => {\r\n            setData(prevData => prevData.map(item => item.id === rowId ? { ...item, ...fieldsToUpdate } : item));\r\n        });\r\n    };\r\n\r\n    const updateMultipleTasks = (fieldsToUpdate) => {\r\n        const promises = Array.from(selectedRows).map(taskId => dispatch(updateTask(taskId, fieldsToUpdate)));\r\n        Promise.all(promises).then(() => {\r\n            fetchTasks();\r\n            deselectAll();\r\n        });\r\n    };\r\n\r\n    const handleBulkDelete = () => {\r\n        if (window.confirm(`¿Estás seguro de que quieres eliminar ${selectedRows.size} tarea(s)?`)) {\r\n            const promises = Array.from(selectedRows).map(taskId => dispatch(deleteTask(taskId)));\r\n            Promise.all(promises).then(() => {\r\n                fetchTasks();\r\n                deselectAll();\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDuplicateTasks = () => {\r\n        const tasksToDuplicate = data.filter(task => selectedRows.has(task.id));\r\n        const promises = tasksToDuplicate.map(task => {\r\n            const { id, created_at, ...newTaskData } = task;\r\n            return dispatch(addTask({\r\n                ...newTaskData,\r\n                task_description: `${task.task_description} (Copia)`,\r\n                status: ESTADOS.PENDIENTE,\r\n                Progress: 0\r\n            }));\r\n        });\r\n        Promise.all(promises).then(() => {\r\n            fetchTasks();\r\n            deselectAll();\r\n        });\r\n    };\r\n\r\n    const deselectAll = () => setSelectedRows(new Set());\r\n\r\n    // --- COMPONENTE DE CELDA EDITABLE (SIN CAMBIOS) ---\r\n    const EditableCell = ({ rowId, field, value, type = 'text', options = [] }) => {\r\n        const [isEditing, setIsEditing] = useState(false);\r\n        const [editValue, setEditValue] = useState(value);\r\n\r\n        const handleSave = () => {\r\n            let finalValue = editValue;\r\n            if (type === 'progress') {\r\n                finalValue = Math.max(0, Math.min(100, Number(finalValue) || 0));\r\n            }\r\n            if (finalValue !== value) {\r\n                let fieldsToUpdate = { [field]: finalValue };\r\n                if (field === 'Progress' && finalValue === 100) {\r\n                    fieldsToUpdate.status = 'Completado';\r\n                }\r\n                updateCell(rowId, fieldsToUpdate);\r\n            }\r\n            setIsEditing(false);\r\n        };\r\n\r\n        const handleKeyPress = (e) => {\r\n            if (e.key === 'Enter' && type !== 'textarea') handleSave();\r\n            else if (e.key === 'Escape') { setEditValue(value); setIsEditing(false); }\r\n        };\r\n\r\n        if (isEditing) {\r\n            switch (type) {\r\n                case 'progress':\r\n                    return <input type=\"number\" min=\"0\" max=\"100\" value={editValue || 0} onChange={(e) => setEditValue(e.target.value)} onBlur={handleSave} onKeyDown={handleKeyPress} className=\"w-full p-1 border rounded focus:outline-none bg-transparent\" autoFocus />;\r\n                case 'select': case 'status-select': case 'priority-select':\r\n                    return <select value={editValue || ''} onChange={(e) => setEditValue(e.target.value)} onBlur={handleSave} onKeyDown={handleKeyPress} className=\"w-full p-1 border rounded focus:outline-none bg-white\" autoFocus><option value=\"\">-- Seleccionar --</option>{options.map(option => (<option key={option.id} value={option.id}>{option.name}</option>))}</select>;\r\n                case 'entregable-select':\r\n                    return <select value={editValue || ''} onChange={(e) => setEditValue(e.target.value)} onBlur={handleSave} onKeyDown={handleKeyPress} className=\"w-full p-1 border rounded focus:outline-none\" autoFocus><option value=\"\">-- Seleccionar --</option>{options.map(option => (<option key={option.id} value={option.id}>{option.entregable_nombre}</option>))}</select>;\r\n                default:\r\n                    return <textarea value={editValue || ''} onChange={(e) => setEditValue(e.target.value)} onBlur={handleSave} onKeyDown={handleKeyPress} className=\"w-full p-1 border rounded focus:outline-none\" rows=\"3\" autoFocus />;\r\n            }\r\n        }\r\n\r\n        const displayValue = (field, val) => {\r\n            switch (field) {\r\n                case 'project_id': return proyectos.find(p => p.id === val)?.name || val || '-';\r\n                case 'staff_id': return staff.find(s => s.id === val)?.name || val || '-';\r\n                case 'stage_id': return stages.find(s => s.id === val)?.name || val || '-';\r\n                case 'entregable_id': return entregables.find(e => e.id === val)?.entregable_nombre || val || '-';\r\n                default: return val || '-';\r\n            }\r\n        };\r\n\r\n        if (field === 'Progress') {\r\n            const progress = Math.max(0, Math.min(100, Number(value) || 0));\r\n            return (\r\n                <div className=\"w-full p-1 cursor-pointer\" onClick={() => setIsEditing(true)}>\r\n                    <div className=\"flex items-center\">\r\n                        <span className=\"text-xs font-semibold mr-2 w-8\">{progress}%</span>\r\n                        <div className=\"w-full bg-gray-200 rounded-full h-2.5\"><div className=\"bg-blue-600 h-2.5 rounded-full\" style={{ width: `${progress}%` }}></div></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        if (field === 'status') {\r\n            return <span className={`px-2 py-1 rounded-full text-xs font-medium cursor-pointer ${getEstadoColor(value)}`} onClick={() => setIsEditing(true)}>{value || '-'}</span>;\r\n        }\r\n        if (field === 'Priority') {\r\n            return <div className=\"cursor-pointer p-1 min-h-[28px]\" onClick={() => setIsEditing(true)}>{value || '-'}</div>;\r\n        }\r\n\r\n        return <div className=\"cursor-pointer p-1 min-h-[28px]\" onClick={() => setIsEditing(true)}>{displayValue(field, value)}</div>;\r\n    };\r\n\r\n    // --- NUEVO: Lógica para redimensionar columnas ---\r\n    const handleMouseDown = useCallback((e, columnKey) => {\r\n        e.preventDefault();\r\n        resizingColumnRef.current = {\r\n            key: columnKey,\r\n            startX: e.clientX,\r\n            startWidth: columnWidths[columnKey],\r\n        };\r\n    }, [columnWidths]);\r\n\r\n    useEffect(() => {\r\n        const handleMouseMove = (e) => {\r\n            if (!resizingColumnRef.current) return;\r\n            const { key, startX, startWidth } = resizingColumnRef.current;\r\n            const newWidth = startWidth + (e.clientX - startX);\r\n            if (newWidth > 50) { // Ancho mínimo de 50px\r\n                setColumnWidths(prev => ({ ...prev, [key]: newWidth }));\r\n            }\r\n        };\r\n\r\n        const handleMouseUp = () => {\r\n            resizingColumnRef.current = null;\r\n        };\r\n\r\n        window.addEventListener('mousemove', handleMouseMove);\r\n        window.addEventListener('mouseup', handleMouseUp);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', handleMouseMove);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        };\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const dataToExport = Object.values(groupedAndSortedItems).flat().map(item => {\r\n            const dates = item.dates ? JSON.parse(item.dates) : {};\r\n            return {\r\n                'Proyecto': proyectos.find(p => p.id === item.project_id)?.name || 'N/A',\r\n                'Prioridad': item.Priority || '-',\r\n                'Etapa': stages.find(s => s.id === item.stage_id)?.name || '-',\r\n                'Tarea': item.task_description,\r\n                'Estado': item.status,\r\n                'Progreso (%)': item.Progress || 0,\r\n                'Responsable': staff.find(s => s.id === item.staff_id)?.name || 'Sin Asignar',\r\n                'Entregable': entregables.find(e => e.id === item.entregable_id)?.entregable_nombre || '-',\r\n                'Fecha Asignación': dates.assignDate || '-',\r\n                'Fecha Límite': dates.dueDate || '-',\r\n                'Notas': item.notes || ''\r\n            };\r\n        });\r\n        const worksheet = XLSX.utils.json_to_sheet(dataToExport);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Tareas\");\r\n        const colWidths = Object.keys(dataToExport[0] || {}).map(key => ({\r\n            wch: Math.max(...dataToExport.map(row => row[key]?.toString().length || 10), key.length)\r\n        }));\r\n        worksheet[\"!cols\"] = colWidths;\r\n        XLSX.writeFile(workbook, \"Gestion_de_Tareas.xlsx\");\r\n    };\r\n\r\n    // --- RENDERIZADO DEL COMPONENTE ---\r\n    return (\r\n        <>\r\n            <FormTask isOpen={isFormOpen} onClose={() => setIsFormOpen(false)} onSubmit={handleAddTask} proyectos={proyectos} staff={staff} stages={stages} entregables={entregables} estados={ESTADOS} />\r\n            <div className=\"flex flex-col h-screen bg-gray-50\">\r\n                <div className=\"bg-white shadow-sm border-b p-4\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                        <div><h1 className=\"text-2xl font-bold text-gray-900\">Gestión de Tareas</h1><p className=\"text-gray-600\">Vista de Hoja de Cálculo Interactiva</p></div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <button onClick={exportToExcel} className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"><Download size={16} /> Exportar</button>\r\n                            <button onClick={() => setIsFormOpen(true)} className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"><Plus size={16} /> Nueva Tarea</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"grid grid-cols-6 gap-4 p-2 bg-gray-50 rounded-lg border\">\r\n                        <div className=\"col-span-2\"><label className=\"block text-sm font-medium text-gray-700 mb-1\">Búsqueda General</label><div className=\"relative\"><Search size={16} className=\"absolute left-3 top-3 text-gray-400\" /><input type=\"text\" placeholder=\"Buscar en toda la tabla...\" value={filters.search} onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))} className=\"pl-10 w-full p-2 border border-gray-300 rounded-lg\" /></div></div>\r\n                        <div><label className=\"block text-sm font-medium text-gray-700 mb-1\">Etapa</label><select value={filters.stage_id} onChange={(e) => setFilters(prev => ({ ...prev, stage_id: e.target.value }))} className=\"w-full p-2 border border-gray-300 rounded-lg\"><option value=\"\">Todas</option>{stages.map(s => (<option key={s.id} value={s.id}>{s.name}</option>))}</select></div>\r\n                        <div><label className=\"block text-sm font-medium text-gray-700 mb-1\">Responsable</label><select value={filters.staff_id} onChange={(e) => setFilters(prev => ({ ...prev, staff_id: e.target.value }))} className=\"w-full p-2 border border-gray-300 rounded-lg\"><option value=\"\">Todos</option>{staff.map(s => (<option key={s.id} value={s.id}>{s.name}</option>))}</select></div>\r\n                        <div><label className=\"block text-sm font-medium text-gray-700 mb-1\">Estado</label><select value={filters.status} onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))} className=\"w-full p-2 border border-gray-300 rounded-lg\"><option value=\"\">Todos</option>{Object.values(ESTADOS).map(estado => (<option key={estado} value={estado}>{estado}</option>))}</select></div>\r\n                        <div className=\"flex items-end\"><button onClick={() => setFilters({ project_id: '', stage_id: '', staff_id: '', status: '', search: '' })} className=\"flex items-center justify-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 w-full\"><XCircle size={16} /> Limpiar</button></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex-1 overflow-auto\">\r\n                    <div className=\"min-w-full\">\r\n                        <table className=\"w-full bg-white text-sm\" style={{ tableLayout: 'fixed' }}>\r\n                            <colgroup>\r\n                                <col style={{ width: '48px' }} /> {/* Checkbox */}\r\n                                {initialColumns.map(col => (\r\n                                    <col key={col.key} style={{ width: `${columnWidths[col.key]}px` }} />\r\n                                ))}\r\n                            </colgroup>\r\n                            <thead className=\"bg-gray-100 sticky top-0 z-10\">\r\n                                <tr>\r\n                                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">\r\n                                        <input type=\"checkbox\" onChange={(e) => e.target.checked ? setSelectedRows(new Set(Object.values(groupedAndSortedItems).flat().map(i => i.id))) : deselectAll()} />\r\n                                    </th>\r\n                                    {initialColumns.map(col => (\r\n                                        <th key={col.key} className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b relative group\">\r\n                                            <div className=\"flex items-center justify-between\">\r\n                                                {col.sortable ? (\r\n                                                    <button onClick={() => requestSort(col.key)} className=\"flex items-center gap-1 hover:text-gray-800\">\r\n                                                        {col.label} <ArrowUpDown size={12} />\r\n                                                    </button>\r\n                                                ) : (\r\n                                                    <span>{col.label}</span>\r\n                                                )}\r\n                                            </div>\r\n                                            <div\r\n                                                onMouseDown={(e) => handleMouseDown(e, col.key)}\r\n                                                className=\"absolute top-0 right-0 h-full w-2 cursor-col-resize bg-blue-300 opacity-0 group-hover:opacity-100\"\r\n                                            />\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"divide-y divide-gray-200\">\r\n                                {Object.keys(groupedAndSortedItems).sort().map(projectName => (\r\n                                    <React.Fragment key={projectName}>\r\n                                        <tr className=\"bg-gray-200 sticky top-12 z-10 cursor-pointer\" onClick={() => toggleGroup(projectName)}>\r\n                                            <td colSpan={initialColumns.length + 1} className=\"py-2 px-4 font-bold text-gray-700\">\r\n                                                <div className=\"flex items-center gap-2\">\r\n                                                    {collapsedGroups.has(projectName) ? <ChevronRight size={16} /> : <ChevronDown size={16} />}\r\n                                                    {projectName} ({groupedAndSortedItems[projectName].length})\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                        {!collapsedGroups.has(projectName) && groupedAndSortedItems[projectName].map((item) => (\r\n                                            <tr key={item.id} className={`hover:bg-gray-50 ${selectedRows.has(item.id) ? 'bg-blue-50' : ''}`}>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><input type=\"checkbox\" checked={selectedRows.has(item.id)} onChange={() => handleSelectRow(item.id)} /></td>\r\n                                                <td className={`px-4 py-2 border-r text-center align-top ${getPriorityColor(item.Priority)}`}><EditableCell rowId={item.id} field=\"Priority\" value={item.Priority} type=\"priority-select\" options={Priorities} /></td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><EditableCell rowId={item.id} field=\"stage_id\" value={item.stage_id} type=\"select\" options={stages} /></td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><EditableCell rowId={item.id} field=\"task_description\" value={item.task_description} type=\"textarea\" /></td>\r\n                                                <td className=\"p-0 border-r align-top\"><InlineActionsTask task={item} /></td>\r\n                                                <td className=\"px-4 py-2 border-r text-center align-top\"><EditableCell rowId={item.id} field=\"status\" value={item.status} type=\"status-select\" options={Object.keys(ESTADOS).map(k => ({ id: ESTADOS[k], name: ESTADOS[k] }))} /></td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><EditableCell rowId={item.id} field=\"Progress\" value={item.Progress} type=\"progress\" /></td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><EditableCell rowId={item.id} field=\"staff_id\" value={item.staff_id} type=\"select\" options={staff} /></td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><EditableCell rowId={item.id} field=\"entregable_id\" value={item.entregable_id} type=\"entregable-select\" options={entregables} /></td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\">\r\n                                                    <DatesManager task={item} onSave={updateCell} />\r\n                                                    <TaskLog task={item} proyectos={proyectos} staff={staff} stages={stages} entregables={entregables} updateCell={updateCell} />\r\n                                                </td>\r\n                                                <td className=\"px-4 py-2 border-r align-top\"><EditableCell rowId={item.id} field=\"notes\" value={item.notes} type=\"textarea\" /></td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </React.Fragment>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <TaskActions\r\n                    selectedRows={selectedRows} data={filteredData} staff={staff}\r\n                    updateMultipleTasks={updateMultipleTasks} handleBulkDelete={handleBulkDelete}\r\n                    handleDuplicateTasks={handleDuplicateTasks} deselectAll={deselectAll}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectExcelView;"],"names":["ArrowUpDown","createLucideIcon","toInputDate","dmyString","day","month","year","toDisplayDate","ymdString","DatesManager","task","onSave","parseDates","datesJson","parsed","error","dates","setDates","useState","useEffect","handleDateChange","e","name","value","displayDate","updatedDates","jsxs","jsx","ESTADOS","getEstadoColor","estado","getPriorityColor","priority","initialColumns","ProjectExcelView","dispatch","useDispatch","data","setData","proyectos","setProyectos","staff","setStaff","stages","setStages","entregables","setEntregables","Priorities","setPriorities","isFormOpen","setIsFormOpen","filters","setFilters","selectedRows","setSelectedRows","sortConfig","setSortConfig","collapsedGroups","setCollapsedGroups","columnWidths","setColumnWidths","acc","col","resizingColumnRef","useRef","fetchTasks","tareasAction","getAllFromTable","proyectosAction","staffAction","stagesAction","entregablesAction","filteredData","useMemo","filtered","searchLower","item","val","groupedAndSortedItems","sortableItems","a","b","getValue","key","_a","p","_b","s","_c","_d","aValue","bValue","projectName","toggleGroup","groupName","prev","newSet","requestSort","direction","handleSelectRow","rowId","newSelected","handleAddTask","taskData","sanitizedTaskData","field","addTask","updateCell","fieldsToUpdate","updateTask","prevData","updateMultipleTasks","promises","taskId","deselectAll","handleBulkDelete","deleteTask","handleDuplicateTasks","id","created_at","newTaskData","EditableCell","type","options","isEditing","setIsEditing","editValue","setEditValue","handleSave","finalValue","handleKeyPress","option","displayValue","progress","handleMouseDown","useCallback","columnKey","handleMouseMove","startX","startWidth","newWidth","handleMouseUp","exportToExcel","dataToExport","worksheet","XLSX.utils","workbook","colWidths","row","XLSX.writeFile","Fragment","FormTask","Download","Plus","Search","XCircle","i","React","ChevronRight","ChevronDown","InlineActionsTask","k","TaskLog","TaskActions"],"mappings":"mOAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,GAAcC,GAAiB,cAAe,CAClD,CAAC,OAAQ,CAAE,EAAG,iBAAkB,IAAK,QAAQ,CAAE,EAC/C,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAQ,CAAE,EACzC,CAAC,OAAQ,CAAE,EAAG,eAAgB,IAAK,QAAQ,CAAE,EAC7C,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,CAC1C,CAAC,ECXKC,GAAeC,GAAc,CACjC,GAAI,CAACA,GAAa,OAAOA,GAAc,UAAYA,EAAU,MAAM,GAAG,EAAE,SAAW,EACjF,MAAO,GAET,KAAM,CAACC,EAAKC,EAAOC,CAAI,EAAIH,EAAU,MAAM,GAAG,EAE9C,MAAO,GAAGG,CAAI,IAAID,EAAM,SAAS,EAAG,GAAG,CAAC,IAAID,EAAI,SAAS,EAAG,GAAG,CAAC,EAClE,EAGMG,GAAiBC,GAAc,CACnC,GAAI,CAACA,GAAa,OAAOA,GAAc,UAAYA,EAAU,MAAM,GAAG,EAAE,SAAW,EACjF,MAAO,GAET,KAAM,CAACF,EAAMD,EAAOD,CAAG,EAAII,EAAU,MAAM,GAAG,EAC9C,MAAO,GAAGJ,CAAG,IAAIC,CAAK,IAAIC,CAAI,EAChC,EAGMG,GAAe,CAAC,CAAE,KAAAC,EAAM,OAAAC,KAAa,CAEzC,MAAMC,EAAcC,GAAc,CAChC,GAAI,CAEF,GAAI,CAACA,GAAa,OAAOA,GAAc,SACnC,MAAO,CAAE,WAAY,GAAI,QAAS,GAAI,KAAM,EAAC,EAEjD,MAAMC,EAAS,KAAK,MAAMD,CAAS,EAEnC,MAAO,CACH,WAAYC,EAAO,YAAc,GACjC,QAASA,EAAO,SAAW,GAC3B,KAAM,MAAM,QAAQA,EAAO,IAAI,EAAIA,EAAO,KAAO,CAAA,CAAC,CAExD,OAASC,EAAO,CACd,eAAQ,MAAM,4CAA6CA,CAAK,EACzD,CAAE,WAAY,GAAI,QAAS,GAAI,KAAM,EAAC,CAC/C,CACF,EAGM,CAACC,EAAOC,CAAQ,EAAIC,EAAAA,SAAS,IAAMN,EAAWF,EAAK,KAAK,CAAC,EAG/DS,EAAAA,UAAU,IAAM,CACdF,EAASL,EAAWF,EAAK,KAAK,CAAC,CACjC,EAAG,CAACA,EAAK,KAAK,CAAC,EAGf,MAAMU,EAAoBC,GAAM,CAC9B,KAAM,CAAE,KAAAC,EAAM,MAAAC,CAAA,EAAUF,EAAE,OAGpBG,EAAcjB,GAAcgB,CAAK,EAIjCE,EAAe,CACjB,GAF0Bb,EAAWF,EAAK,KAAK,EAG/C,CAACY,CAAI,EAAGE,CAAA,EAKZb,EAAOD,EAAK,GAAI,CAAE,MAAO,KAAK,UAAUe,CAAY,EAAG,CACzD,EAEA,OACEC,EAAAA,KAAC,MAAA,CAAI,UAAU,kCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAM,QAAS,cAAcjB,EAAK,EAAE,GAAI,UAAU,qDAAqD,SAAA,OAAA,CAAK,EAC7GiB,EAAAA,IAAC,QAAA,CACC,GAAI,cAAcjB,EAAK,EAAE,GACzB,KAAK,aACL,KAAK,OACL,MAAOR,GAAYc,EAAM,UAAU,EACnC,SAAUI,EACV,UAAU,kGAAA,CAAA,CACZ,EACF,EACAM,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAM,QAAS,WAAWjB,EAAK,EAAE,GAAI,UAAU,qDAAqD,SAAA,SAAA,CAAO,EAC5GiB,EAAAA,IAAC,QAAA,CACC,GAAI,WAAWjB,EAAK,EAAE,GACtB,KAAK,UACL,KAAK,OACL,MAAOR,GAAYc,EAAM,OAAO,EAChC,SAAUI,EACV,UAAU,kGAAA,CAAA,CACZ,CAAA,CACF,CAAA,EACF,CAEJ,EC5EMQ,EAAU,CACZ,UAAW,YAAa,WAAY,cAAe,WAAY,aAC/D,UAAW,YAAa,YAAa,cAAe,UAAW,YAC/D,qBAAsB,uBAAwB,UAAW,YAAa,aAAc,cACxF,EAEMC,GAAkBC,IACL,CACX,UAAa,gCAAiC,cAAe,4BAC7D,WAAc,8BAA+B,UAAa,0BAC1D,cAAe,gCAAiC,UAAa,yBAC7D,uBAAwB,gCAAiC,YAAa,4BACtE,eAAgB,+BAAA,GAENA,CAAM,GAAK,4BAGvBC,GAAoBC,IACP,CACX,KAAQ,4BACR,aAAc,8BACd,MAAS,gCACT,aAAc,gCACd,KAAQ,iCAAA,GAEEA,CAAQ,GAAK,4BAIzBC,EAAiB,CACnB,CAAE,IAAK,WAAY,MAAO,YAAa,MAAO,GAAI,SAAU,EAAA,EAC5D,CAAE,IAAK,WAAY,MAAO,QAAS,MAAO,GAAI,SAAU,EAAA,EACxD,CAAE,IAAK,mBAAoB,MAAO,kBAAmB,MAAO,IAAK,SAAU,EAAA,EAC3E,CAAE,IAAK,iBAAkB,MAAO,oBAAqB,MAAO,IAAK,SAAU,EAAA,EAC3E,CAAE,IAAK,SAAU,MAAO,SAAU,MAAO,GAAI,SAAU,EAAA,EACvD,CAAE,IAAK,WAAY,MAAO,WAAY,MAAO,IAAK,SAAU,EAAA,EAC5D,CAAE,IAAK,WAAY,MAAO,cAAe,MAAO,GAAI,SAAU,EAAA,EAC9D,CAAE,IAAK,gBAAiB,MAAO,aAAc,MAAO,IAAK,SAAU,EAAA,EACnE,CAAE,IAAK,QAAS,MAAO,SAAU,MAAO,IAAK,SAAU,EAAA,EACvD,CAAE,IAAK,QAAS,MAAO,QAAS,MAAO,IAAK,SAAU,EAAA,CAC1D,EAEMC,GAAmB,IAAM,CAC3B,MAAMC,EAAWC,GAAA,EAGX,CAACC,EAAMC,CAAO,EAAIpB,EAAAA,SAAS,CAAA,CAAE,EAC7B,CAACqB,EAAWC,CAAY,EAAItB,EAAAA,SAAS,CAAA,CAAE,EACvC,CAACuB,EAAOC,CAAQ,EAAIxB,EAAAA,SAAS,CAAA,CAAE,EAC/B,CAACyB,EAAQC,CAAS,EAAI1B,EAAAA,SAAS,CAAA,CAAE,EACjC,CAAC2B,EAAaC,CAAc,EAAI5B,EAAAA,SAAS,CAAA,CAAE,EAE3C,CAAC6B,EAAYC,EAAa,EAAI9B,WAAS,CACzC,CAAE,GAAI,OAAQ,KAAM,MAAA,EAAU,CAAE,GAAI,aAAc,KAAM,YAAA,EACxD,CAAE,GAAI,QAAS,KAAM,OAAA,EAAW,CAAE,GAAI,aAAc,KAAM,YAAA,EAC1D,CAAE,GAAI,OAAQ,KAAM,MAAA,CAAO,CAC9B,EAEK,CAAC+B,GAAYC,CAAa,EAAIhC,EAAAA,SAAS,EAAK,EAC5C,CAACiC,EAASC,CAAU,EAAIlC,EAAAA,SAAS,CAAE,WAAY,GAAI,SAAU,GAAI,SAAU,GAAI,OAAQ,GAAI,OAAQ,GAAI,EACvG,CAACmC,EAAcC,CAAe,EAAIpC,EAAAA,SAAS,IAAI,GAAK,EACpD,CAACqC,EAAYC,EAAa,EAAItC,EAAAA,SAAS,CAAE,IAAK,mBAAoB,UAAW,YAAa,EAC1F,CAACuC,EAAiBC,EAAkB,EAAIxC,EAAAA,SAAS,IAAI,GAAK,EAG1D,CAACyC,EAAcC,EAAe,EAAI1C,EAAAA,SACpCe,EAAe,OAAO,CAAC4B,EAAKC,KAAS,CAAE,GAAGD,EAAK,CAACC,EAAI,GAAG,EAAGA,EAAI,KAAA,GAAU,CAAA,CAAE,CAAA,EAExEC,EAAoBC,EAAAA,OAAO,IAAI,EAG/BC,EAAa,SAAY,CAC3B,MAAMC,EAAe,MAAM/B,EAASgC,EAAgB,QAAQ,CAAC,EACzDD,GAAA,MAAAA,EAAc,SAAS5B,EAAQ4B,EAAa,OAAO,CAC3D,EAEA/C,EAAAA,UAAU,IAAM,EACS,SAAY,CAC7B,KAAM,CAACiD,EAAiBC,EAAaC,EAAcC,CAAiB,EAAI,MAAM,QAAQ,IAAI,CACtFpC,EAASgC,EAAgB,WAAW,CAAC,EACrChC,EAASgC,EAAgB,OAAO,CAAC,EACjChC,EAASgC,EAAgB,OAAO,CAAC,EACjChC,EAASgC,EAAgB,sBAAsB,CAAC,CAAA,CACnD,EACGC,GAAA,MAAAA,EAAiB,SAAS5B,EAAa4B,EAAgB,OAAO,EAC9DC,GAAA,MAAAA,EAAa,SAAS3B,EAAS2B,EAAY,OAAO,EAClDC,GAAA,MAAAA,EAAc,SAAS1B,EAAU0B,EAAa,OAAO,EACrDC,GAAA,MAAAA,EAAmB,SAASzB,EAAeyB,EAAkB,OAAO,CAC5E,GACA,EACAN,EAAA,CACJ,EAAG,CAAC9B,CAAQ,CAAC,EAGb,MAAMqC,EAAeC,EAAAA,QAAQ,IAAM,CAC/B,IAAIC,EAAW,CAAC,GAAGrC,CAAI,EACvB,GAAIc,EAAQ,OAAQ,CAChB,MAAMwB,EAAcxB,EAAQ,OAAO,YAAA,EACnCuB,EAAWA,EAAS,OAAOE,GACvB,OAAO,OAAOA,CAAI,EAAE,KAAKC,GAAO,OAAOA,CAAG,EAAE,YAAA,EAAc,SAASF,CAAW,CAAC,CAAA,CAEvF,CACA,OAAIxB,EAAQ,aAAYuB,EAAWA,EAAS,OAAOE,GAAQA,EAAK,aAAezB,EAAQ,UAAU,GAC7FA,EAAQ,WAAUuB,EAAWA,EAAS,OAAOE,GAAQA,EAAK,WAAazB,EAAQ,QAAQ,GACvFA,EAAQ,WAAUuB,EAAWA,EAAS,OAAOE,GAAQA,EAAK,WAAazB,EAAQ,QAAQ,GACvFA,EAAQ,SAAQuB,EAAWA,EAAS,OAAOE,GAAQA,EAAK,SAAWzB,EAAQ,MAAM,GAC9EuB,CACX,EAAG,CAACrC,EAAMc,CAAO,CAAC,EAEZ2B,EAAwBL,EAAAA,QAAQ,IAAM,CACxC,IAAIM,EAAgB,CAAC,GAAGP,CAAY,EACpC,OAAIjB,EAAW,MAAQ,MACnBwB,EAAc,KAAK,CAACC,EAAGC,IAAM,CACzB,MAAMC,EAAW,CAACN,EAAMO,IAAQ,aAC5B,IAAI5D,EAAQqD,EAAKO,CAAG,GAAK,GACzB,OAAQA,EAAA,CACJ,IAAK,aAAc,QAAOC,EAAA7C,EAAU,KAAK8C,GAAKA,EAAE,KAAO9D,CAAK,IAAlC,YAAA6D,EAAqC,OAAQ7D,EACvE,IAAK,WAAY,QAAO+D,EAAA7C,EAAM,KAAK8C,GAAKA,EAAE,KAAOhE,CAAK,IAA9B,YAAA+D,EAAiC,OAAQ/D,EACjE,IAAK,WAAY,QAAOiE,EAAA7C,EAAO,KAAK4C,GAAKA,EAAE,KAAOhE,CAAK,IAA/B,YAAAiE,EAAkC,OAAQjE,EAClE,IAAK,gBAAiB,QAAOkE,EAAA5C,EAAY,KAAKxB,GAAKA,EAAE,KAAOE,CAAK,IAApC,YAAAkE,EAAuC,oBAAqBlE,EACzF,IAAK,QAAS,OAAOqD,EAAK,OAAQ,KAAK,MAAMA,EAAK,KAAK,EAAE,SAAW,GACpE,IAAK,WAAY,OAAO,OAAOrD,GAAS,CAAC,EACzC,QAAS,OAAOA,CAAA,CAExB,EACMmE,EAASR,EAASF,EAAGzB,EAAW,GAAG,EACnCoC,EAAST,EAASD,EAAG1B,EAAW,GAAG,EACzC,OAAImC,EAASC,EAAepC,EAAW,YAAc,YAAc,GAAK,EACpEmC,EAASC,EAAepC,EAAW,YAAc,YAAc,EAAI,GAChE,CACX,CAAC,EAEEwB,EAAc,OAAO,CAAClB,EAAKe,IAAS,OACvC,MAAMgB,IAAcR,EAAA7C,EAAU,KAAK8C,GAAKA,EAAE,KAAOT,EAAK,UAAU,IAA5C,YAAAQ,EAA+C,OAAQ,sBAC3E,OAAKvB,EAAI+B,CAAW,IAAG/B,EAAI+B,CAAW,EAAI,CAAA,GAC1C/B,EAAI+B,CAAW,EAAE,KAAKhB,CAAI,EACnBf,CACX,EAAG,CAAA,CAAE,CACT,EAAG,CAACW,EAAcjB,EAAYhB,EAAWE,EAAOE,EAAQE,CAAW,CAAC,EAG9DgD,GAAeC,GAAc,CAC/BpC,GAAmBqC,GAAQ,CACvB,MAAMC,EAAS,IAAI,IAAID,CAAI,EAC3B,OAAAC,EAAO,IAAIF,CAAS,EAAIE,EAAO,OAAOF,CAAS,EAAIE,EAAO,IAAIF,CAAS,EAChEE,CACX,CAAC,CACL,EAEMC,GAAed,GAAQ,CACzB,IAAIe,EAAY,YACZ3C,EAAW,MAAQ4B,GAAO5B,EAAW,YAAc,cACnD2C,EAAY,cAEhB1C,GAAc,CAAE,IAAA2B,EAAK,UAAAe,EAAW,CACpC,EAEMC,GAAmBC,GAAU,CAC/B9C,EAAgByC,GAAQ,CACpB,MAAMM,EAAc,IAAI,IAAIN,CAAI,EAChC,OAAAM,EAAY,IAAID,CAAK,EAAIC,EAAY,OAAOD,CAAK,EAAIC,EAAY,IAAID,CAAK,EACnEC,CACX,CAAC,CACL,EAGMC,GAAiBC,GAAa,CAChC,MAAMC,EAAoB,CAAE,GAAGD,CAAA,EAC/B,CAAC,aAAc,WAAY,WAAY,eAAe,EAAE,QAAQE,GAAS,CACjED,EAAkBC,CAAK,IAAM,KAAID,EAAkBC,CAAK,EAAI,KACpE,CAAC,EACDtE,EAASuE,EAAQF,CAAiB,CAAC,EAAE,KAAKvC,CAAU,EACpDf,EAAc,EAAK,CACvB,EAQMyD,EAAa,CAACP,EAAOQ,IAAmB,CAC1CzE,EAAS0E,EAAWT,EAAOQ,CAAc,CAAC,EAAE,KAAK,IAAM,CACnDtE,EAAQwE,GAAYA,EAAS,IAAIlC,GAAQA,EAAK,KAAOwB,EAAQ,CAAE,GAAGxB,EAAM,GAAGgC,CAAA,EAAmBhC,CAAI,CAAC,CACvG,CAAC,CACL,EAEMmC,GAAuBH,GAAmB,CAC5C,MAAMI,EAAW,MAAM,KAAK3D,CAAY,EAAE,IAAI4D,GAAU9E,EAAS0E,EAAWI,EAAQL,CAAc,CAAC,CAAC,EACpG,QAAQ,IAAII,CAAQ,EAAE,KAAK,IAAM,CAC7B/C,EAAA,EACAiD,EAAA,CACJ,CAAC,CACL,EAEMC,GAAmB,IAAM,CAC3B,GAAI,OAAO,QAAQ,yCAAyC9D,EAAa,IAAI,YAAY,EAAG,CACxF,MAAM2D,EAAW,MAAM,KAAK3D,CAAY,EAAE,IAAI4D,GAAU9E,EAASiF,GAAWH,CAAM,CAAC,CAAC,EACpF,QAAQ,IAAID,CAAQ,EAAE,KAAK,IAAM,CAC7B/C,EAAA,EACAiD,EAAA,CACJ,CAAC,CACL,CACJ,EAEMG,GAAuB,IAAM,CAE/B,MAAML,EADmB3E,EAAK,OAAO3B,GAAQ2C,EAAa,IAAI3C,EAAK,EAAE,CAAC,EACpC,IAAIA,GAAQ,CAC1C,KAAM,CAAE,GAAA4G,EAAI,WAAAC,EAAY,GAAGC,GAAgB9G,EAC3C,OAAOyB,EAASuE,EAAQ,CACpB,GAAGc,EACH,iBAAkB,GAAG9G,EAAK,gBAAgB,WAC1C,OAAQkB,EAAQ,UAChB,SAAU,CAAA,CACb,CAAC,CACN,CAAC,EACD,QAAQ,IAAIoF,CAAQ,EAAE,KAAK,IAAM,CAC7B/C,EAAA,EACAiD,EAAA,CACJ,CAAC,CACL,EAEMA,EAAc,IAAM5D,EAAgB,IAAI,GAAK,EAG7CmE,EAAe,CAAC,CAAE,MAAArB,EAAO,MAAAK,EAAO,MAAAlF,EAAO,KAAAmG,EAAO,OAAQ,QAAAC,EAAU,CAAA,KAAS,CAC3E,KAAM,CAACC,EAAWC,CAAY,EAAI3G,EAAAA,SAAS,EAAK,EAC1C,CAAC4G,EAAWC,CAAY,EAAI7G,EAAAA,SAASK,CAAK,EAE1CyG,EAAa,IAAM,CACrB,IAAIC,EAAaH,EAIjB,GAHIJ,IAAS,aACTO,EAAa,KAAK,IAAI,EAAG,KAAK,IAAI,IAAK,OAAOA,CAAU,GAAK,CAAC,CAAC,GAE/DA,IAAe1G,EAAO,CACtB,IAAIqF,EAAiB,CAAE,CAACH,CAAK,EAAGwB,CAAA,EAC5BxB,IAAU,YAAcwB,IAAe,MACvCrB,EAAe,OAAS,cAE5BD,EAAWP,EAAOQ,CAAc,CACpC,CACAiB,EAAa,EAAK,CACtB,EAEMK,EAAkB7G,GAAM,CACtBA,EAAE,MAAQ,SAAWqG,IAAS,WAAYM,EAAA,EACrC3G,EAAE,MAAQ,WAAY0G,EAAaxG,CAAK,EAAGsG,EAAa,EAAK,EAC1E,EAEA,GAAID,EACA,OAAQF,EAAA,CACJ,IAAK,WACD,OAAO/F,EAAAA,IAAC,QAAA,CAAM,KAAK,SAAS,IAAI,IAAI,IAAI,MAAM,MAAOmG,GAAa,EAAG,SAAWzG,GAAM0G,EAAa1G,EAAE,OAAO,KAAK,EAAG,OAAQ2G,EAAY,UAAWE,EAAgB,UAAU,8DAA8D,UAAS,EAAA,CAAC,EACzP,IAAK,SAAU,IAAK,gBAAiB,IAAK,kBACtC,OAAOxG,EAAAA,KAAC,UAAO,MAAOoG,GAAa,GAAI,SAAWzG,GAAM0G,EAAa1G,EAAE,OAAO,KAAK,EAAG,OAAQ2G,EAAY,UAAWE,EAAgB,UAAU,wDAAwD,UAAS,GAAC,SAAA,CAAAvG,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,oBAAiB,EAAUgG,EAAQ,IAAIQ,GAAWxG,EAAAA,IAAC,SAAA,CAAuB,MAAOwG,EAAO,GAAK,SAAAA,EAAO,IAAA,EAArCA,EAAO,EAAmC,CAAU,CAAA,EAAE,EAC3V,IAAK,oBACD,OAAOzG,EAAAA,KAAC,UAAO,MAAOoG,GAAa,GAAI,SAAWzG,GAAM0G,EAAa1G,EAAE,OAAO,KAAK,EAAG,OAAQ2G,EAAY,UAAWE,EAAgB,UAAU,+CAA+C,UAAS,GAAC,SAAA,CAAAvG,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,oBAAiB,EAAUgG,EAAQ,IAAIQ,GAAWxG,EAAAA,IAAC,SAAA,CAAuB,MAAOwG,EAAO,GAAK,SAAAA,EAAO,iBAAA,EAArCA,EAAO,EAAgD,CAAU,CAAA,EAAE,EAC/V,QACI,OAAOxG,MAAC,YAAS,MAAOmG,GAAa,GAAI,SAAWzG,GAAM0G,EAAa1G,EAAE,OAAO,KAAK,EAAG,OAAQ2G,EAAY,UAAWE,EAAgB,UAAU,+CAA+C,KAAK,IAAI,UAAS,EAAA,CAAC,CAAA,CAI/N,MAAME,EAAe,CAAC3B,EAAO5B,IAAQ,aACjC,OAAQ4B,EAAAA,CACJ,IAAK,aAAc,QAAOrB,EAAA7C,EAAU,KAAK8C,GAAKA,EAAE,KAAOR,CAAG,IAAhC,YAAAO,EAAmC,OAAQP,GAAO,IAC5E,IAAK,WAAY,QAAOS,EAAA7C,EAAM,KAAK8C,GAAKA,EAAE,KAAOV,CAAG,IAA5B,YAAAS,EAA+B,OAAQT,GAAO,IACtE,IAAK,WAAY,QAAOW,EAAA7C,EAAO,KAAK4C,GAAKA,EAAE,KAAOV,CAAG,IAA7B,YAAAW,EAAgC,OAAQX,GAAO,IACvE,IAAK,gBAAiB,QAAOY,EAAA5C,EAAY,KAAKxB,GAAKA,EAAE,KAAOwD,CAAG,IAAlC,YAAAY,EAAqC,oBAAqBZ,GAAO,IAC9F,QAAS,OAAOA,GAAO,GAAA,CAE/B,EAEA,GAAI4B,IAAU,WAAY,CACtB,MAAM4B,EAAW,KAAK,IAAI,EAAG,KAAK,IAAI,IAAK,OAAO9G,CAAK,GAAK,CAAC,CAAC,EAC9D,OACII,EAAAA,IAAC,MAAA,CAAI,UAAU,4BAA4B,QAAS,IAAMkG,EAAa,EAAI,EACvE,SAAAnG,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACX,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,iCAAkC,SAAA,CAAA2G,EAAS,GAAA,EAAC,EAC5D1G,EAAAA,IAAC,MAAA,CAAI,UAAU,wCAAwC,eAAC,MAAA,CAAI,UAAU,iCAAiC,MAAO,CAAE,MAAO,GAAG0G,CAAQ,GAAA,EAAO,CAAA,CAAM,CAAA,CAAA,CACnJ,CAAA,CACJ,CAER,CACA,OAAI5B,IAAU,SACH9E,EAAAA,IAAC,OAAA,CAAK,UAAW,6DAA6DE,GAAeN,CAAK,CAAC,GAAI,QAAS,IAAMsG,EAAa,EAAI,EAAI,YAAS,IAAI,EAE/JpB,IAAU,WACH9E,EAAAA,IAAC,MAAA,CAAI,UAAU,kCAAkC,QAAS,IAAMkG,EAAa,EAAI,EAAI,SAAAtG,GAAS,GAAA,CAAI,EAGtGI,EAAAA,IAAC,MAAA,CAAI,UAAU,kCAAkC,QAAS,IAAMkG,EAAa,EAAI,EAAI,SAAAO,EAAa3B,EAAOlF,CAAK,CAAA,CAAE,CAC3H,EAGM+G,GAAkBC,EAAAA,YAAY,CAAClH,EAAGmH,IAAc,CAClDnH,EAAE,eAAA,EACF0C,EAAkB,QAAU,CACxB,IAAKyE,EACL,OAAQnH,EAAE,QACV,WAAYsC,EAAa6E,CAAS,CAAA,CAE1C,EAAG,CAAC7E,CAAY,CAAC,EAEjBxC,EAAAA,UAAU,IAAM,CACZ,MAAMsH,EAAmBpH,GAAM,CAC3B,GAAI,CAAC0C,EAAkB,QAAS,OAChC,KAAM,CAAE,IAAAoB,EAAK,OAAAuD,EAAQ,WAAAC,CAAA,EAAe5E,EAAkB,QAChD6E,EAAWD,GAActH,EAAE,QAAUqH,GACvCE,EAAW,IACXhF,GAAgBmC,IAAS,CAAE,GAAGA,EAAM,CAACZ,CAAG,EAAGyD,GAAW,CAE9D,EAEMC,EAAgB,IAAM,CACxB9E,EAAkB,QAAU,IAChC,EAEA,cAAO,iBAAiB,YAAa0E,CAAe,EACpD,OAAO,iBAAiB,UAAWI,CAAa,EAEzC,IAAM,CACT,OAAO,oBAAoB,YAAaJ,CAAe,EACvD,OAAO,oBAAoB,UAAWI,CAAa,CACvD,CACJ,EAAG,CAAA,CAAE,EAEL,MAAMC,GAAgB,IAAM,CACxB,MAAMC,EAAe,OAAO,OAAOjE,CAAqB,EAAE,KAAA,EAAO,IAAIF,GAAQ,aACzE,MAAM5D,EAAQ4D,EAAK,MAAQ,KAAK,MAAMA,EAAK,KAAK,EAAI,CAAA,EACpD,MAAO,CACH,WAAYQ,EAAA7C,EAAU,KAAK8C,GAAKA,EAAE,KAAOT,EAAK,UAAU,IAA5C,YAAAQ,EAA+C,OAAQ,MACnE,UAAaR,EAAK,UAAY,IAC9B,QAASU,EAAA3C,EAAO,KAAK4C,GAAKA,EAAE,KAAOX,EAAK,QAAQ,IAAvC,YAAAU,EAA0C,OAAQ,IAC3D,MAASV,EAAK,iBACd,OAAUA,EAAK,OACf,eAAgBA,EAAK,UAAY,EACjC,cAAeY,EAAA/C,EAAM,KAAK8C,GAAKA,EAAE,KAAOX,EAAK,QAAQ,IAAtC,YAAAY,EAAyC,OAAQ,cAChE,aAAcC,EAAA5C,EAAY,KAAKxB,GAAKA,EAAE,KAAOuD,EAAK,aAAa,IAAjD,YAAAa,EAAoD,oBAAqB,IACvF,mBAAoBzE,EAAM,YAAc,IACxC,eAAgBA,EAAM,SAAW,IACjC,MAAS4D,EAAK,OAAS,EAAA,CAE/B,CAAC,EACKoE,EAAYC,EAAW,cAAcF,CAAY,EACjDG,EAAWD,EAAW,SAAA,EAC5BA,EAAW,kBAAkBC,EAAUF,EAAW,QAAQ,EAC1D,MAAMG,EAAY,OAAO,KAAKJ,EAAa,CAAC,GAAK,EAAE,EAAE,IAAI5D,IAAQ,CAC7D,IAAK,KAAK,IAAI,GAAG4D,EAAa,IAAIK,GAAA,OAAO,QAAAhE,EAAAgE,EAAIjE,CAAG,IAAP,YAAAC,EAAU,WAAW,SAAU,GAAE,EAAGD,EAAI,MAAM,CAAA,EACzF,EACF6D,EAAU,OAAO,EAAIG,EACrBE,GAAeH,EAAU,wBAAwB,CACrD,EAGA,OACIxH,EAAAA,KAAA4H,WAAA,CACI,SAAA,CAAA3H,EAAAA,IAAC4H,GAAA,CAAS,OAAQtG,GAAY,QAAS,IAAMC,EAAc,EAAK,EAAG,SAAUoD,GAAe,UAAA/D,EAAsB,MAAAE,EAAc,OAAAE,EAAgB,YAAAE,EAA0B,QAASjB,EAAS,EAC5LF,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACX,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,kCACX,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACX,SAAA,CAAAA,OAAC,MAAA,CAAI,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,mCAAmC,SAAA,oBAAiB,EAAKA,EAAAA,IAAC,IAAA,CAAE,UAAU,gBAAgB,SAAA,sCAAA,CAAoC,CAAA,EAAI,EACjJD,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACX,SAAA,CAAAA,EAAAA,KAAC,SAAA,CAAO,QAASoH,GAAe,UAAU,0FAA0F,SAAA,CAAAnH,EAAAA,IAAC6H,GAAA,CAAS,KAAM,EAAA,CAAI,EAAE,WAAA,EAAS,EACnK9H,OAAC,UAAO,QAAS,IAAMwB,EAAc,EAAI,EAAG,UAAU,wFAAwF,SAAA,CAAAvB,EAAAA,IAAC8H,GAAA,CAAK,KAAM,EAAA,CAAI,EAAE,cAAA,CAAA,CAAY,CAAA,CAAA,CAChL,CAAA,EACJ,EACA/H,EAAAA,KAAC,MAAA,CAAI,UAAU,0DACX,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,aAAa,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,mBAAgB,EAAQD,EAAAA,KAAC,MAAA,CAAI,UAAU,WAAW,SAAA,CAAAC,EAAAA,IAAC+H,GAAA,CAAO,KAAM,GAAI,UAAU,sCAAsC,EAAE/H,EAAAA,IAAC,QAAA,CAAM,KAAK,OAAO,YAAY,6BAA6B,MAAOwB,EAAQ,OAAQ,SAAW9B,GAAM+B,EAAW2C,IAAS,CAAE,GAAGA,EAAM,OAAQ1E,EAAE,OAAO,KAAA,EAAQ,EAAG,UAAU,oDAAA,CAAqD,CAAA,CAAA,CAAE,CAAA,EAAM,SACvb,MAAA,CAAI,SAAA,CAAAM,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,QAAK,EAAQD,OAAC,UAAO,MAAOyB,EAAQ,SAAU,SAAW9B,GAAM+B,EAAW2C,IAAS,CAAE,GAAGA,EAAM,SAAU1E,EAAE,OAAO,OAAQ,EAAG,UAAU,+CAA+C,SAAA,CAAAM,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,QAAK,EAAUgB,EAAO,IAAI4C,GAAM5D,EAAAA,IAAC,SAAA,CAAkB,MAAO4D,EAAE,GAAK,SAAAA,EAAE,IAAA,EAAtBA,EAAE,EAAyB,CAAU,CAAA,CAAA,CAAE,CAAA,EAAS,SACvW,MAAA,CAAI,SAAA,CAAA5D,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,cAAW,EAAQD,OAAC,UAAO,MAAOyB,EAAQ,SAAU,SAAW9B,GAAM+B,EAAW2C,IAAS,CAAE,GAAGA,EAAM,SAAU1E,EAAE,OAAO,OAAQ,EAAG,UAAU,+CAA+C,SAAA,CAAAM,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,QAAK,EAAUc,EAAM,IAAI8C,GAAM5D,EAAAA,IAAC,SAAA,CAAkB,MAAO4D,EAAE,GAAK,SAAAA,EAAE,IAAA,EAAtBA,EAAE,EAAyB,CAAU,CAAA,CAAA,CAAE,CAAA,EAAS,SAC5W,MAAA,CAAI,SAAA,CAAA5D,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,SAAM,EAAQD,OAAC,UAAO,MAAOyB,EAAQ,OAAQ,SAAW9B,GAAM+B,EAAW2C,IAAS,CAAE,GAAGA,EAAM,OAAQ1E,EAAE,OAAO,OAAQ,EAAG,UAAU,+CAA+C,SAAA,CAAAM,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,QAAK,EAAU,OAAO,OAAOC,CAAO,EAAE,IAAIE,GAAWH,EAAAA,IAAC,SAAA,CAAoB,MAAOG,EAAS,SAAAA,CAAA,EAAxBA,CAA+B,CAAU,CAAA,CAAA,CAAE,CAAA,EAAS,EAC9XH,EAAAA,IAAC,OAAI,UAAU,iBAAiB,gBAAC,SAAA,CAAO,QAAS,IAAMyB,EAAW,CAAE,WAAY,GAAI,SAAU,GAAI,SAAU,GAAI,OAAQ,GAAI,OAAQ,EAAA,CAAI,EAAG,UAAU,8GAA8G,SAAA,CAAAzB,EAAAA,IAACgI,GAAA,CAAQ,KAAM,EAAA,CAAI,EAAE,UAAA,CAAA,CAAQ,CAAA,CAAS,CAAA,CAAA,CAC7S,CAAA,EACJ,QAEC,MAAA,CAAI,UAAU,uBACX,SAAAhI,MAAC,OAAI,UAAU,aACX,SAAAD,OAAC,QAAA,CAAM,UAAU,0BAA0B,MAAO,CAAE,YAAa,SAC7D,SAAA,CAAAA,OAAC,WAAA,CACG,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,MAAO,CAAE,MAAO,QAAU,EAAE,IAChCM,EAAe,IAAI6B,GAChBnC,EAAAA,IAAC,MAAA,CAAkB,MAAO,CAAE,MAAO,GAAGgC,EAAaG,EAAI,GAAG,CAAC,KAAK,EAAtDA,EAAI,GAAqD,CACtE,CAAA,EACL,EACAnC,MAAC,QAAA,CAAM,UAAU,gCACb,gBAAC,KAAA,CACG,SAAA,CAAAA,EAAAA,IAAC,KAAA,CAAG,UAAU,0FACV,SAAAA,EAAAA,IAAC,QAAA,CAAM,KAAK,WAAW,SAAWN,GAAMA,EAAE,OAAO,QAAUiC,EAAgB,IAAI,IAAI,OAAO,OAAOwB,CAAqB,EAAE,KAAA,EAAO,IAAI8E,GAAKA,EAAE,EAAE,CAAC,CAAC,EAAI1C,EAAA,EAAe,EACrK,EACCjF,EAAe,IAAI6B,GAChBpC,EAAAA,KAAC,KAAA,CAAiB,UAAU,yGACxB,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,oCACV,SAAAmC,EAAI,SACDpC,EAAAA,KAAC,SAAA,CAAO,QAAS,IAAMuE,GAAYnC,EAAI,GAAG,EAAG,UAAU,8CAClD,SAAA,CAAAA,EAAI,MAAM,IAACnC,EAAAA,IAAC3B,GAAA,CAAY,KAAM,EAAA,CAAI,CAAA,EACvC,EAEA2B,EAAAA,IAAC,OAAA,CAAM,SAAAmC,EAAI,MAAM,EAEzB,EACAnC,EAAAA,IAAC,MAAA,CACG,YAAcN,GAAMiH,GAAgBjH,EAAGyC,EAAI,GAAG,EAC9C,UAAU,mGAAA,CAAA,CACd,CAAA,EAbKA,EAAI,GAcb,CACH,CAAA,CAAA,CACL,CAAA,CACJ,EACAnC,EAAAA,IAAC,QAAA,CAAM,UAAU,2BACZ,gBAAO,KAAKmD,CAAqB,EAAE,KAAA,EAAO,IAAIc,GAC3ClE,EAAAA,KAACmI,GAAM,SAAN,CACG,SAAA,CAAAlI,EAAAA,IAAC,MAAG,UAAU,gDAAgD,QAAS,IAAMkE,GAAYD,CAAW,EAChG,SAAAjE,EAAAA,IAAC,MAAG,QAASM,EAAe,OAAS,EAAG,UAAU,oCAC9C,SAAAP,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACV,SAAA,CAAA+B,EAAgB,IAAImC,CAAW,EAAIjE,EAAAA,IAACmI,GAAA,CAAa,KAAM,EAAA,CAAI,EAAKnI,EAAAA,IAACoI,GAAA,CAAY,KAAM,EAAA,CAAI,EACvFnE,EAAY,KAAGd,EAAsBc,CAAW,EAAE,OAAO,GAAA,CAAA,CAC9D,EACJ,EACJ,EACC,CAACnC,EAAgB,IAAImC,CAAW,GAAKd,EAAsBc,CAAW,EAAE,IAAKhB,UACzE,KAAA,CAAiB,UAAW,oBAAoBvB,EAAa,IAAIuB,EAAK,EAAE,EAAI,aAAe,EAAE,GAC1F,SAAA,CAAAjD,MAAC,MAAG,UAAU,+BAA+B,eAAC,QAAA,CAAM,KAAK,WAAW,QAAS0B,EAAa,IAAIuB,EAAK,EAAE,EAAG,SAAU,IAAMuB,GAAgBvB,EAAK,EAAE,EAAG,EAAE,EACpJjD,EAAAA,IAAC,MAAG,UAAW,4CAA4CI,GAAiB6C,EAAK,QAAQ,CAAC,GAAI,SAAAjD,EAAAA,IAAC8F,EAAA,CAAa,MAAO7C,EAAK,GAAI,MAAM,WAAW,MAAOA,EAAK,SAAU,KAAK,kBAAkB,QAAS7B,CAAA,CAAY,CAAA,CAAE,QAChN,KAAA,CAAG,UAAU,+BAA+B,SAAApB,EAAAA,IAAC8F,EAAA,CAAa,MAAO7C,EAAK,GAAI,MAAM,WAAW,MAAOA,EAAK,SAAU,KAAK,SAAS,QAASjC,EAAQ,EAAE,QAClJ,KAAA,CAAG,UAAU,+BAA+B,SAAAhB,EAAAA,IAAC8F,GAAa,MAAO7C,EAAK,GAAI,MAAM,mBAAmB,MAAOA,EAAK,iBAAkB,KAAK,WAAW,EAAE,EACpJjD,EAAAA,IAAC,MAAG,UAAU,yBAAyB,eAACqI,GAAA,CAAkB,KAAMpF,EAAM,CAAA,CAAE,EACxEjD,EAAAA,IAAC,KAAA,CAAG,UAAU,2CAA2C,eAAC8F,EAAA,CAAa,MAAO7C,EAAK,GAAI,MAAM,SAAS,MAAOA,EAAK,OAAQ,KAAK,gBAAgB,QAAS,OAAO,KAAKhD,CAAO,EAAE,IAAIqI,IAAM,CAAE,GAAIrI,EAAQqI,CAAC,EAAG,KAAMrI,EAAQqI,CAAC,GAAI,EAAG,EAAE,QAChO,KAAA,CAAG,UAAU,+BAA+B,SAAAtI,EAAAA,IAAC8F,GAAa,MAAO7C,EAAK,GAAI,MAAM,WAAW,MAAOA,EAAK,SAAU,KAAK,WAAW,EAAE,QACnI,KAAA,CAAG,UAAU,+BAA+B,SAAAjD,EAAAA,IAAC8F,EAAA,CAAa,MAAO7C,EAAK,GAAI,MAAM,WAAW,MAAOA,EAAK,SAAU,KAAK,SAAS,QAASnC,EAAO,EAAE,QACjJ,KAAA,CAAG,UAAU,+BAA+B,SAAAd,EAAAA,IAAC8F,EAAA,CAAa,MAAO7C,EAAK,GAAI,MAAM,gBAAgB,MAAOA,EAAK,cAAe,KAAK,oBAAoB,QAAS/B,EAAa,EAAE,EAC7KnB,EAAAA,KAAC,KAAA,CAAG,UAAU,+BACV,SAAA,CAAAC,EAAAA,IAAClB,GAAA,CAAa,KAAMmE,EAAM,OAAQ+B,EAAY,EAC9ChF,MAACuI,IAAQ,KAAMtF,EAAM,UAAArC,EAAsB,MAAAE,EAAc,OAAAE,EAAgB,YAAAE,EAA0B,WAAA8D,CAAA,CAAwB,CAAA,EAC/H,QACC,KAAA,CAAG,UAAU,+BAA+B,SAAAhF,EAAAA,IAAC8F,GAAa,MAAO7C,EAAK,GAAI,MAAM,QAAQ,MAAOA,EAAK,MAAO,KAAK,WAAW,CAAA,CAAE,CAAA,CAAA,EAdzHA,EAAK,EAed,CACH,CAAA,CAAA,EA1BgBgB,CA2BrB,CACH,CAAA,CACL,CAAA,CAAA,CACJ,EACJ,EACJ,EAEAjE,EAAAA,IAACwI,GAAA,CACG,aAAA9G,EAA4B,KAAMmB,EAAc,MAAA/B,EAChD,oBAAAsE,GAA0C,iBAAAI,GAC1C,qBAAAE,GAA4C,YAAAH,CAAA,CAAA,CAChD,CAAA,CACJ,CAAA,EACJ,CAER","x_google_ignoreList":[0]}